
C:/Users/linli/Desktop/lab9/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
.globl binary_search
binary_search:

SUB sp,sp,#20
   0:	e24dd014 	sub	sp, sp, #20
SUB R10,R3,R2         //endindex-startindex
   4:	e043a002 	sub	r10, r3, r2
ADD R10,R2,R10,LSR#1  //startindex+0.5(endindex-startindex)
   8:	e082a0aa 	add	r10, r2, r10, lsr #1
ADD R8,R8,#1          //numcalls++
   c:	e2888001 	add	r8, r8, #1

STR R8,[sp,#16]       //store r8
  10:	e58d8010 	str	r8, [sp, #16]
STR R12,[sp,#12]   //numbers[middleindex]
  14:	e58dc00c 	str	r12, [sp, #12]
STR R10,[sp,#8]  //middleindex
  18:	e58da008 	str	r10, [sp, #8]
STR R0,[sp,#4]    //numbers
  1c:	e58d0004 	str	r0, [sp, #4]
STR lr,[sp,#0]    //link register
  20:	e58de000 	str	lr, [sp]
LDR R12,[R0,R10,LSL#2] //numbers[middleindex]
  24:	e790c10a 	ldr	r12, [r0, r10, lsl #2]

CMP R2,R3        //startindex>endindex
  28:	e1520003 	cmp	r2, r3
BHI LOOP1        //unsigned >
  2c:	8a00000d 	bhi	68 <LOOP1>

CMP R12,R1   //numbers[middleindex] and key
  30:	e15c0001 	cmp	r12, r1
BEQ LOOP2    //numbers[middleindex]==key
  34:	0a00000f 	beq	78 <LOOP2>
BHI LOOP3    //numbers[middleindex]>key
  38:	8a000010 	bhi	80 <LOOP3>
BLO LOOP4    //numbers[middleindex]<key
  3c:	3a000012 	bcc	8c <LOOP4>

00000040 <MAJOR>:

MAJOR:
MOV R7,#0
  40:	e3a07000 	mov	r7, #0
LDR R8,[sp,#16]
  44:	e59d8010 	ldr	r8, [sp, #16]
SUB R8,R7,R8// -numcalls
  48:	e0478008 	sub	r8, r7, r8
MOV R12,R8
  4c:	e1a0c008 	mov	r12, r8
LDR lr,[sp,#0] 
  50:	e59de000 	ldr	lr, [sp]
LDR R10,[sp,#8]//middleindex
  54:	e59da008 	ldr	r10, [sp, #8]
LDR R7,[sp,#4]//base address changed to another register
  58:	e59d7004 	ldr	r7, [sp, #4]
STR R12,[R7,R10,LSL#2]
  5c:	e787c10a 	str	r12, [r7, r10, lsl #2]
ADD sp,sp,#20
  60:	e28dd014 	add	sp, sp, #20
MOV pc,lr
  64:	e1a0f00e 	mov	pc, lr

00000068 <LOOP1>:

LOOP1:
MOV R0,#-1     //return -1
  68:	e3e00000 	mvn	r0, #0
LDR lr,[sp,#0] //restore link register
  6c:	e59de000 	ldr	lr, [sp]
ADD sp,sp,#20  //clean the flashmem
  70:	e28dd014 	add	sp, sp, #20
MOV pc,lr      //go back to lr address
  74:	e1a0f00e 	mov	pc, lr

00000078 <LOOP2>:

LOOP2:
MOV R0,R10     //keyindex=middleindex
  78:	e1a0000a 	mov	r0, r10
B MAJOR        
  7c:	eaffffef 	b	40 <MAJOR>

00000080 <LOOP3>:

LOOP3:
SUB R3,R10,#1  //endindex=middleindex-1
  80:	e24a3001 	sub	r3, r10, #1
BL binary_search
  84:	ebffffdd 	bl	0 <__cs3_interrupt_vector>
B MAJOR
  88:	eaffffec 	b	40 <MAJOR>

0000008c <LOOP4>:

LOOP4:
ADD R2,R10,#1  //startindex=middleindex+1
  8c:	e28a2001 	add	r2, r10, #1
BL binary_search
  90:	ebffffda 	bl	0 <__cs3_interrupt_vector>
B MAJOR
  94:	eaffffe9 	b	40 <MAJOR>

00000098 <_start>:

.include "address_map_arm.s"
.text
.globl _start
_start:
      ldr r4,=SW_BASE
  98:	e59f4390 	ldr	r4, [pc, #912]	; 430 <numbers+0x190>
      ldr r5,=KEY_BASE 
  9c:	e59f5390 	ldr	r5, [pc, #912]	; 434 <numbers+0x194>
      ldr r6,=LEDR_BASE
  a0:	e59f6390 	ldr	r6, [pc, #912]	; 438 <numbers+0x198>

000000a4 <wait_key3>:

      // enter the value of "key" on SW0-SW9 here, then press KEY3
wait_key3:
      ldr r7,[r4]         // Read SW0-SW9 into R7
  a4:	e5947000 	ldr	r7, [r4]

      str r7,[r6]         // Show SW0-SW9 value on LEDR0-LEDR9
  a8:	e5867000 	str	r7, [r6]
      // triggers a ``Data Abort'' exception, which in turn 
      // causes the Cortex-A9 to set the PC to 0x00000010.  
      // Debug tip: Check you write -numData to the right 
      // address in memory.

      ldr r9,[r5]         // Read KEY0-KEY3 into R9 
  ac:	e5959000 	ldr	r9, [r5]

      ands r9,r9,#8       // Is KEY3 pressed?
  b0:	e2199008 	ands	r9, r9, #8
      // to indicate R9 is not zero.  
      //
      // If KEY3 is NOT pressed ands r9,r9,#8 sets Z flag to 1 
      // to indicate R9 is zero.

      beq wait_key3       // Branch if Z=1 (KEY3 was NOT pressed)
  b4:	0afffffa 	beq	a4 <wait_key3>

      // initialize numbers array by copying array "data" to "numbers"
      ldr r0, =data
  b8:	e59f037c 	ldr	r0, [pc, #892]	; 43c <numbers+0x19c>
      ldr r1, =numbers
  bc:	e59f137c 	ldr	r1, [pc, #892]	; 440 <numbers+0x1a0>
      mov r2,#100
  c0:	e3a02064 	mov	r2, #100	; 0x64
      add r2,r0, r2, LSL #2
  c4:	e0802102 	add	r2, r0, r2, lsl #2
      bl  init_numbers
  c8:	eb00000b 	bl	fc <init_numbers>

      ldr r0, =numbers    // R0 = numbers
  cc:	e59f036c 	ldr	r0, [pc, #876]	; 440 <numbers+0x1a0>
      mov r1,r7           // R1 = key
  d0:	e1a01007 	mov	r1, r7
      mov r2,#0           // R2 = startIndex
  d4:	e3a02000 	mov	r2, #0
      mov r3,#99          // R3 = endIndex (start with small value to debug)
  d8:	e3a03063 	mov	r3, #99	; 0x63
      mov r8,#0           // initial NumCalls
  dc:	e3a08000 	mov	r8, #0
      str r8,[sp,#-4]     // save 5th arg to stack (see Slide Set 9)
  e0:	e50d8004 	str	r8, [sp, #-4]
      bl  binary_search   // call binary_search    
  e4:	ebffffc5 	bl	0 <__cs3_interrupt_vector>
      str r0,[r6]         // display result on LEDR0-LEDR9 (check your result!)
  e8:	e5860000 	str	r0, [r6]

000000ec <wait_key0>:
      // format of memory by right-clicking on the background, selecting "Number
      // format" then "Decimal".  Repeat and in the last step select "Signed 
      // representation".  If endIndex was 99, you should see something like 
      // Figure 6 in the Lab 9 handout.
wait_key0:                
      ldr  r1,[r5]        // read KEY0-KEY3
  ec:	e5951000 	ldr	r1, [r5]
      ands r1,r1,#1       // check if KEY0 pressed
  f0:	e2111001 	ands	r1, r1, #1
      beq  wait_key0      // wait for KEY0 to be pressed
  f4:	0afffffc 	beq	ec <wait_key0>

      b wait_key3         // go back and try another search
  f8:	eaffffe9 	b	a4 <wait_key3>

000000fc <init_numbers>:

// "init_numbers" copies array pointed at by r0 into array pointed at by r1
// The following code is NOT recursive.  It contains a loop.
init_numbers:
      ldr r3, [r0], #4
  fc:	e4903004 	ldr	r3, [r0], #4
      str r3, [r1], #4
 100:	e4813004 	str	r3, [r1], #4
      cmp r0, r2
 104:	e1500002 	cmp	r0, r2
      blt init_numbers
 108:	bafffffb 	blt	fc <init_numbers>
      mov pc, lr
 10c:	e1a0f00e 	mov	pc, lr

00000110 <data>:
 110:	0000001c 	.word	0x0000001c
 114:	00000025 	.word	0x00000025
 118:	0000002c 	.word	0x0000002c
 11c:	0000003c 	.word	0x0000003c
 120:	00000055 	.word	0x00000055
 124:	00000063 	.word	0x00000063
 128:	00000079 	.word	0x00000079
 12c:	0000007f 	.word	0x0000007f
 130:	00000081 	.word	0x00000081
 134:	0000008a 	.word	0x0000008a
 138:	0000008f 	.word	0x0000008f
 13c:	0000009b 	.word	0x0000009b
 140:	000000a2 	.word	0x000000a2
 144:	000000a4 	.word	0x000000a4
 148:	000000af 	.word	0x000000af
 14c:	000000b3 	.word	0x000000b3
 150:	000000cd 	.word	0x000000cd
 154:	000000d4 	.word	0x000000d4
 158:	000000d9 	.word	0x000000d9
 15c:	000000e7 	.word	0x000000e7
 160:	000000eb 	.word	0x000000eb
 164:	000000ee 	.word	0x000000ee
 168:	000000f2 	.word	0x000000f2
 16c:	000000f8 	.word	0x000000f8
 170:	000000fa 	.word	0x000000fa
 174:	00000102 	.word	0x00000102
 178:	0000011b 	.word	0x0000011b
 17c:	0000011e 	.word	0x0000011e
 180:	00000131 	.word	0x00000131
 184:	00000137 	.word	0x00000137
 188:	0000013c 	.word	0x0000013c
 18c:	00000142 	.word	0x00000142
 190:	00000146 	.word	0x00000146
 194:	0000015f 	.word	0x0000015f
 198:	00000163 	.word	0x00000163
 19c:	0000016c 	.word	0x0000016c
 1a0:	0000016e 	.word	0x0000016e
 1a4:	00000178 	.word	0x00000178
 1a8:	00000187 	.word	0x00000187
 1ac:	0000018e 	.word	0x0000018e
 1b0:	00000198 	.word	0x00000198
 1b4:	0000019a 	.word	0x0000019a
 1b8:	0000019f 	.word	0x0000019f
 1bc:	000001a2 	.word	0x000001a2
 1c0:	000001a9 	.word	0x000001a9
 1c4:	000001b5 	.word	0x000001b5
 1c8:	000001b9 	.word	0x000001b9
 1cc:	000001c4 	.word	0x000001c4
 1d0:	000001da 	.word	0x000001da
 1d4:	000001e8 	.word	0x000001e8
 1d8:	000001fa 	.word	0x000001fa
 1dc:	000001fb 	.word	0x000001fb
 1e0:	0000020e 	.word	0x0000020e
 1e4:	00000214 	.word	0x00000214
 1e8:	00000216 	.word	0x00000216
 1ec:	00000223 	.word	0x00000223
 1f0:	00000224 	.word	0x00000224
 1f4:	00000247 	.word	0x00000247
 1f8:	00000249 	.word	0x00000249
 1fc:	00000253 	.word	0x00000253
 200:	0000025b 	.word	0x0000025b
 204:	0000026d 	.word	0x0000026d
 208:	00000280 	.word	0x00000280
 20c:	00000295 	.word	0x00000295
 210:	0000029a 	.word	0x0000029a
 214:	000002b2 	.word	0x000002b2
 218:	000002b4 	.word	0x000002b4
 21c:	000002c9 	.word	0x000002c9
 220:	000002cf 	.word	0x000002cf
 224:	000002ee 	.word	0x000002ee
 228:	000002f3 	.word	0x000002f3
 22c:	00000300 	.word	0x00000300
 230:	00000307 	.word	0x00000307
 234:	00000308 	.word	0x00000308
 238:	00000310 	.word	0x00000310
 23c:	00000311 	.word	0x00000311
 240:	00000317 	.word	0x00000317
 244:	0000031d 	.word	0x0000031d
 248:	0000031e 	.word	0x0000031e
 24c:	00000324 	.word	0x00000324
 250:	0000033c 	.word	0x0000033c
 254:	0000034a 	.word	0x0000034a
 258:	0000034e 	.word	0x0000034e
 25c:	0000035a 	.word	0x0000035a
 260:	00000374 	.word	0x00000374
 264:	00000377 	.word	0x00000377
 268:	0000037a 	.word	0x0000037a
 26c:	0000037d 	.word	0x0000037d
 270:	0000038c 	.word	0x0000038c
 274:	000003a8 	.word	0x000003a8
 278:	000003ab 	.word	0x000003ab
 27c:	000003b9 	.word	0x000003b9
 280:	000003c0 	.word	0x000003c0
 284:	000003ca 	.word	0x000003ca
 288:	000003d2 	.word	0x000003d2
 28c:	000003d3 	.word	0x000003d3
 290:	000003d5 	.word	0x000003d5
 294:	000003de 	.word	0x000003de
 298:	000003ea 	.word	0x000003ea
 29c:	000003ef 	.word	0x000003ef

000002a0 <numbers>:
 2a0:	deadbeef 	.word	0xdeadbeef
 2a4:	deadbeef 	.word	0xdeadbeef
 2a8:	deadbeef 	.word	0xdeadbeef
 2ac:	deadbeef 	.word	0xdeadbeef
 2b0:	deadbeef 	.word	0xdeadbeef
 2b4:	deadbeef 	.word	0xdeadbeef
 2b8:	deadbeef 	.word	0xdeadbeef
 2bc:	deadbeef 	.word	0xdeadbeef
 2c0:	deadbeef 	.word	0xdeadbeef
 2c4:	deadbeef 	.word	0xdeadbeef
 2c8:	deadbeef 	.word	0xdeadbeef
 2cc:	deadbeef 	.word	0xdeadbeef
 2d0:	deadbeef 	.word	0xdeadbeef
 2d4:	deadbeef 	.word	0xdeadbeef
 2d8:	deadbeef 	.word	0xdeadbeef
 2dc:	deadbeef 	.word	0xdeadbeef
 2e0:	deadbeef 	.word	0xdeadbeef
 2e4:	deadbeef 	.word	0xdeadbeef
 2e8:	deadbeef 	.word	0xdeadbeef
 2ec:	deadbeef 	.word	0xdeadbeef
 2f0:	deadbeef 	.word	0xdeadbeef
 2f4:	deadbeef 	.word	0xdeadbeef
 2f8:	deadbeef 	.word	0xdeadbeef
 2fc:	deadbeef 	.word	0xdeadbeef
 300:	deadbeef 	.word	0xdeadbeef
 304:	deadbeef 	.word	0xdeadbeef
 308:	deadbeef 	.word	0xdeadbeef
 30c:	deadbeef 	.word	0xdeadbeef
 310:	deadbeef 	.word	0xdeadbeef
 314:	deadbeef 	.word	0xdeadbeef
 318:	deadbeef 	.word	0xdeadbeef
 31c:	deadbeef 	.word	0xdeadbeef
 320:	deadbeef 	.word	0xdeadbeef
 324:	deadbeef 	.word	0xdeadbeef
 328:	deadbeef 	.word	0xdeadbeef
 32c:	deadbeef 	.word	0xdeadbeef
 330:	deadbeef 	.word	0xdeadbeef
 334:	deadbeef 	.word	0xdeadbeef
 338:	deadbeef 	.word	0xdeadbeef
 33c:	deadbeef 	.word	0xdeadbeef
 340:	deadbeef 	.word	0xdeadbeef
 344:	deadbeef 	.word	0xdeadbeef
 348:	deadbeef 	.word	0xdeadbeef
 34c:	deadbeef 	.word	0xdeadbeef
 350:	deadbeef 	.word	0xdeadbeef
 354:	deadbeef 	.word	0xdeadbeef
 358:	deadbeef 	.word	0xdeadbeef
 35c:	deadbeef 	.word	0xdeadbeef
 360:	deadbeef 	.word	0xdeadbeef
 364:	deadbeef 	.word	0xdeadbeef
 368:	deadbeef 	.word	0xdeadbeef
 36c:	deadbeef 	.word	0xdeadbeef
 370:	deadbeef 	.word	0xdeadbeef
 374:	deadbeef 	.word	0xdeadbeef
 378:	deadbeef 	.word	0xdeadbeef
 37c:	deadbeef 	.word	0xdeadbeef
 380:	deadbeef 	.word	0xdeadbeef
 384:	deadbeef 	.word	0xdeadbeef
 388:	deadbeef 	.word	0xdeadbeef
 38c:	deadbeef 	.word	0xdeadbeef
 390:	deadbeef 	.word	0xdeadbeef
 394:	deadbeef 	.word	0xdeadbeef
 398:	deadbeef 	.word	0xdeadbeef
 39c:	deadbeef 	.word	0xdeadbeef
 3a0:	deadbeef 	.word	0xdeadbeef
 3a4:	deadbeef 	.word	0xdeadbeef
 3a8:	deadbeef 	.word	0xdeadbeef
 3ac:	deadbeef 	.word	0xdeadbeef
 3b0:	deadbeef 	.word	0xdeadbeef
 3b4:	deadbeef 	.word	0xdeadbeef
 3b8:	deadbeef 	.word	0xdeadbeef
 3bc:	deadbeef 	.word	0xdeadbeef
 3c0:	deadbeef 	.word	0xdeadbeef
 3c4:	deadbeef 	.word	0xdeadbeef
 3c8:	deadbeef 	.word	0xdeadbeef
 3cc:	deadbeef 	.word	0xdeadbeef
 3d0:	deadbeef 	.word	0xdeadbeef
 3d4:	deadbeef 	.word	0xdeadbeef
 3d8:	deadbeef 	.word	0xdeadbeef
 3dc:	deadbeef 	.word	0xdeadbeef
 3e0:	deadbeef 	.word	0xdeadbeef
 3e4:	deadbeef 	.word	0xdeadbeef
 3e8:	deadbeef 	.word	0xdeadbeef
 3ec:	deadbeef 	.word	0xdeadbeef
 3f0:	deadbeef 	.word	0xdeadbeef
 3f4:	deadbeef 	.word	0xdeadbeef
 3f8:	deadbeef 	.word	0xdeadbeef
 3fc:	deadbeef 	.word	0xdeadbeef
 400:	deadbeef 	.word	0xdeadbeef
 404:	deadbeef 	.word	0xdeadbeef
 408:	deadbeef 	.word	0xdeadbeef
 40c:	deadbeef 	.word	0xdeadbeef
 410:	deadbeef 	.word	0xdeadbeef
 414:	deadbeef 	.word	0xdeadbeef
 418:	deadbeef 	.word	0xdeadbeef
 41c:	deadbeef 	.word	0xdeadbeef
 420:	deadbeef 	.word	0xdeadbeef
 424:	deadbeef 	.word	0xdeadbeef
 428:	deadbeef 	.word	0xdeadbeef
 42c:	deadbeef 	.word	0xdeadbeef
 430:	ff200040 	.word	0xff200040
 434:	ff200050 	.word	0xff200050
 438:	ff200000 	.word	0xff200000
 43c:	00000110 	.word	0x00000110
 440:	000002a0 	.word	0x000002a0
